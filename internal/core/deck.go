package core

import (
	"fmt"
	"time"
)

// Deck is an unordered deck
type Deck struct {
	Cards [52]*Card `yaml:"cards"`
}

// NewOrderedDeck returns *Deck which contains all the 52 cards,
// in the following order (index: id rank suit):
//    0:  1  A‚ô• | 13: 14  A‚ô£ | 26: 27  A‚ô¶ | 39: 40  A‚ô†
//    1:  2  2‚ô• | 14: 15  2‚ô£ | 27: 28  2‚ô¶ | 40: 41  2‚ô†
//    2:  3  3‚ô• | 15: 16  3‚ô£ | 28: 29  3‚ô¶ | 41: 42  3‚ô†
//    3:  4  4‚ô• | 16: 17  4‚ô£ | 29: 30  4‚ô¶ | 42: 43  4‚ô†
//    4:  5  5‚ô• | 17: 18  5‚ô£ | 30: 31  5‚ô¶ | 43: 44  5‚ô†
//    5:  6  6‚ô• | 18: 19  6‚ô£ | 31: 32  6‚ô¶ | 44: 45  6‚ô†
//    6:  7  7‚ô• | 19: 20  7‚ô£ | 32: 33  7‚ô¶ | 45: 46  7‚ô†
//    7:  8  8‚ô• | 20: 21  8‚ô£ | 33: 34  8‚ô¶ | 46: 47  8‚ô†
//    8:  9  9‚ô• | 21: 22  9‚ô£ | 34: 35  9‚ô¶ | 47: 48  9‚ô†
//    9: 10 10‚ô• | 22: 23 10‚ô£ | 35: 36 10‚ô¶ | 48: 49 10‚ô†
//   10: 11  J‚ô• | 23: 24  J‚ô£ | 36: 37  J‚ô¶ | 49: 50  J‚ô†
//   11: 12  Q‚ô• | 24: 25  Q‚ô£ | 37: 38  Q‚ô¶ | 50: 51  Q‚ô†
//   12: 13  K‚ô• | 25: 26  K‚ô£ | 38: 39  K‚ô¶ | 51: 52  K‚ô†
func NewOrderedDeck(loc *Locale) *Deck {
	var c *Card
	var err error

	od := &Deck{}

	for i := uint8(0); i < 52; i++ {
		if c, err = NewCardFromNumber(i+1, loc); err != nil {
			panic("Unable to create Deck")
		}

		od.Cards[i] = c
	}

	return od
}

func NewDeckFromSlice(s [52]uint8, od *Deck) (*Deck, error) {
	var err error

	d := &Deck{}

	for i := uint(0); i < 52; i++ {
		if d.Cards[i], err = od.FindCardByNumber(s[i]); err != nil {
			return nil, err
		}
	}
	return d, nil
}

// FindCardByNumber returns appropriate card from a deck
func (d Deck) FindCardByNumber(n uint8) (*Card, error) {
	if n <= 0 || n > 52 {
		return nil, fmt.Errorf("Invalid card number: %d", n)
	}

	for _, c := range d.Cards {
		if c.ID == n {
			return c, nil
		}
	}

	return nil, fmt.Errorf("No such card with number %v was found in the deck", n)
}

// FindCardByBirthday returns appropriate card from a deck
//
//     | Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec
//  ---+-----------------------------------------------------------
//   1 |  K‚ô†   J‚ô†   9‚ô†   7‚ô†   5‚ô†   3‚ô†   A‚ô†   Q‚ô¶  10‚ô¶   8‚ô¶   6‚ô¶   4‚ô¶
//   2 |  Q‚ô†  10‚ô†   8‚ô†   6‚ô†   4‚ô†   2‚ô†   K‚ô¶   J‚ô¶   9‚ô¶   7‚ô¶   5‚ô¶   3‚ô¶
//   3 |  J‚ô†   9‚ô†   7‚ô†   5‚ô†   3‚ô†   A‚ô†   Q‚ô¶  10‚ô¶   8‚ô¶   6‚ô¶   4‚ô¶   2‚ô¶
//   4 | 10‚ô†   8‚ô†   6‚ô†   4‚ô†   2‚ô†   K‚ô¶   J‚ô¶   9‚ô¶   7‚ô¶   5‚ô¶   3‚ô¶   A‚ô¶
//   5 |  9‚ô†   7‚ô†   5‚ô†   3‚ô†   A‚ô†   Q‚ô¶  10‚ô¶   8‚ô¶   6‚ô¶   4‚ô¶   2‚ô¶   K‚ô£
//   6 |  8‚ô†   6‚ô†   4‚ô†   2‚ô†   K‚ô¶   J‚ô¶   9‚ô¶   7‚ô¶   5‚ô¶   3‚ô¶   A‚ô¶   Q‚ô£
//   7 |  7‚ô†   5‚ô†   3‚ô†   A‚ô†   Q‚ô¶  10‚ô¶   8‚ô¶   6‚ô¶   4‚ô¶   2‚ô¶   K‚ô£   J‚ô£
//   8 |  6‚ô†   4‚ô†   2‚ô†   K‚ô¶   J‚ô¶   9‚ô¶   7‚ô¶   5‚ô¶   3‚ô¶   A‚ô¶   Q‚ô£  10‚ô£
//   9 |  5‚ô†   3‚ô†   A‚ô†   Q‚ô¶  10‚ô¶   8‚ô¶   6‚ô¶   4‚ô¶   2‚ô¶   K‚ô£   J‚ô£   9‚ô£
//  10 |  4‚ô†   2‚ô†   K‚ô¶   J‚ô¶   9‚ô¶   7‚ô¶   5‚ô¶   3‚ô¶   A‚ô¶   Q‚ô£  10‚ô£   8‚ô£
//  11 |  3‚ô†   A‚ô†   Q‚ô¶  10‚ô¶   8‚ô¶   6‚ô¶   4‚ô¶   2‚ô¶   K‚ô£   J‚ô£   9‚ô£   7‚ô£
//  12 |  2‚ô†   K‚ô¶   J‚ô¶   9‚ô¶   7‚ô¶   5‚ô¶   3‚ô¶   A‚ô¶   Q‚ô£  10‚ô£   8‚ô£   6‚ô£
//  13 |  A‚ô†   Q‚ô¶  10‚ô¶   8‚ô¶   6‚ô¶   4‚ô¶   2‚ô¶   K‚ô£   J‚ô£   9‚ô£   7‚ô£   5‚ô£
//  14 |  K‚ô¶   J‚ô¶   9‚ô¶   7‚ô¶   5‚ô¶   3‚ô¶   A‚ô¶   Q‚ô£  10‚ô£   8‚ô£   6‚ô£   4‚ô£
//  15 |  Q‚ô¶  10‚ô¶   8‚ô¶   6‚ô¶   4‚ô¶   2‚ô¶   K‚ô£   J‚ô£   9‚ô£   7‚ô£   5‚ô£   3‚ô£
//  16 |  J‚ô¶   9‚ô¶   7‚ô¶   5‚ô¶   3‚ô¶   A‚ô¶   Q‚ô£  10‚ô£   8‚ô£   6‚ô£   4‚ô£   2‚ô£
//  17 | 10‚ô¶   8‚ô¶   6‚ô¶   4‚ô¶   2‚ô¶   K‚ô£   J‚ô£   9‚ô£   7‚ô£   5‚ô£   3‚ô£   A‚ô£
//  18 |  9‚ô¶   7‚ô¶   5‚ô¶   3‚ô¶   A‚ô¶   Q‚ô£  10‚ô£   8‚ô£   6‚ô£   4‚ô£   2‚ô£   K‚ô•
//  19 |  8‚ô¶   6‚ô¶   4‚ô¶   2‚ô¶   K‚ô£   J‚ô£   9‚ô£   7‚ô£   5‚ô£   3‚ô£   A‚ô£   Q‚ô•
//  20 |  7‚ô¶   5‚ô¶   3‚ô¶   A‚ô¶   Q‚ô£  10‚ô£   8‚ô£   6‚ô£   4‚ô£   2‚ô£   K‚ô•   J‚ô•
//  21 |  6‚ô¶   4‚ô¶   2‚ô¶   K‚ô£   J‚ô£   9‚ô£   7‚ô£   5‚ô£   3‚ô£   A‚ô£   Q‚ô•  10‚ô•
//  22 |  5‚ô¶   3‚ô¶   A‚ô¶   Q‚ô£  10‚ô£   8‚ô£   6‚ô£   4‚ô£   2‚ô£   K‚ô•   J‚ô•   9‚ô•
//  23 |  4‚ô¶   2‚ô¶   K‚ô£   J‚ô£   9‚ô£   7‚ô£   5‚ô£   3‚ô£   A‚ô£   Q‚ô•  10‚ô•   8‚ô•
//  24 |  3‚ô¶   A‚ô¶   Q‚ô£  10‚ô£   8‚ô£   6‚ô£   4‚ô£   2‚ô£   K‚ô•   J‚ô•   9‚ô•   7‚ô•
//  25 |  2‚ô¶   K‚ô£   J‚ô£   9‚ô£   7‚ô£   5‚ô£   3‚ô£   A‚ô£   Q‚ô•  10‚ô•   8‚ô•   6‚ô•
//  26 |  A‚ô¶   Q‚ô£  10‚ô£   8‚ô£   6‚ô£   4‚ô£   2‚ô£   K‚ô•   J‚ô•   9‚ô•   7‚ô•   5‚ô•
//  27 |  K‚ô£   J‚ô£   9‚ô£   7‚ô£   5‚ô£   3‚ô£   A‚ô£   Q‚ô•  10‚ô•   8‚ô•   6‚ô•   4‚ô•
//  28 |  Q‚ô£  10‚ô£   8‚ô£   6‚ô£   4‚ô£   2‚ô£   K‚ô•   J‚ô•   9‚ô•   7‚ô•   5‚ô•   3‚ô•
//  29 |  J‚ô£   9‚ô£   7‚ô£   5‚ô£   3‚ô£   A‚ô£   Q‚ô•  10‚ô•   8‚ô•   6‚ô•   4‚ô•   2‚ô•
//  30 | 10‚ô£        6‚ô£   4‚ô£   2‚ô£   K‚ô•   J‚ô•   9‚ô•   7‚ô•   5‚ô•   3‚ô•   A‚ô•
//  31 |  9‚ô£        5‚ô£        A‚ô£       10‚ô•   8‚ô•        4‚ô•        üÉè
func (d Deck) FindCardByBirthday(t time.Time) (*Card, error) {
	idx := 54 - (t.Day() + (int(t.Month()) * 2)) + 1

	if idx <= 0 || idx > 52 {
		return nil, fmt.Errorf("Got invalid card number `%v` for birthday: %v", idx, t)
	}

	return d.FindCardByNumber(uint8(idx))
}

// FindCardByIndex returns appropriate card from a deck
func (d Deck) FindCardByIndex(i uint8) (*Card, error) {
	var c *Card

	if c = d.Cards[i]; c == nil {
		return nil, fmt.Errorf("No such card with index %v was found in the deck", i)
	}

	return c, nil
}

func (d Deck) indexOf(value uint8) (uint8, error) {
	for i, v := range d.Cards {
		if v.ID == value {
			return uint8(i), nil
		}
	}

	return 255, fmt.Errorf("Unable to find index of `%v`", value)
}

func (d Deck) AsNumbers() [52]uint8 {
	var s [52]uint8

	for i, v := range d.Cards {
		s[i] += v.ID
	}

	return s
}

func (d Deck) AsUnicode() [52]string {
	var s [52]string

	for i, v := range d.Cards {
		s[i] = fmt.Sprintf("%v%v ", v.Rank, v.Suit)
	}

	return s
}

func (d Deck) CalcHRow(c *Card) ([7]*Card, error) {
	var row [7]*Card
	var ci uint8 // card index
	var err error

	if ci, err = d.indexOf(c.ID); err != nil {
		return row, err
	}

	for i := uint8(1); i <= 7; i++ {
		cur := ci + i
		if cur >= 52 {
			cur -= 52
		}

		row[i-1] = d.Cards[cur]
	}

	return row, nil
}

// CalcVRow ...
// 6: [48, 41, 34, 27, 20, 13, 6]      [-1, -8,  -15, ...]
// 5: [47, 40, 33, 26, 19, 12, 5]      [-2, -9,  -16, ...]
// 4: [46, 39, 32, 25, 18, 11, 4, 51]  [-3, -10, -17, ...]
// 3: [45, 38, 31, 24, 17, 10, 3, 50]  [-4, -11, -18, ...]
// 2: [44, 37, 30, 23, 16, 9,  2, 49]  [-5, -12, -19, ...]
// 1: [43, 36, 29, 22, 15, 8,  1]      [-6, -13, -20, ...]
// 0: [42, 35, 28, 21, 14, 7,  0]      [-7, -14, -21, ...]
func (d Deck) CalcVRow(c *Card) ([7]*Card, error) {
	var row [7]*Card
	var ci uint8 // card index
	var err error

	if ci, err = d.indexOf(c.ID); err != nil {
		return row, err
	}

	for i := 1; i <= 7; i++ {
		cur := int(ci) - i*7
		if cur < 0 {
			switch {
			case cur%7 == -3 || cur%7 == -4 || cur%7 == -5: // we are in
				if cur == -3 || cur == -4 || cur == -5 {
					cur = 54 + cur
				} else {
					cur = 56 + cur
				}
			default:
				if i == 7 {
					continue
				}
				cur = 49 + cur
			}
		}
		// fmt.Printf("ci: %2v, i: %v , cur: %3v | ", ci, i, cur)
		// fmt.Printf("%v: %2v | %v%v\n", i, d.Cards[cur].ID, d.Cards[cur].Rank, d.Cards[cur].Suit)
		row[i-1] = d.Cards[cur]
	}

	return row, nil
}
