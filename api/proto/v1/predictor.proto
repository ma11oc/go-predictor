syntax = "proto3";

package v1;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Predictor Service";
		version: "0.1";
		contact: {
			name: "predictor service project";
			url: "https://predictor.reset.sh";
			email: "predictor@reset.sh";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};

enum Gender {
  OTHER  = 0;
  MALE   = 1;
  FEMALE = 2;
}

enum Features {
  NOT_SPECIFIED  = 0x00;
  BUSINESS_OWNER = 0x01;
  CREATOR        = 0x02;
}


message PersonProfile {
  string name     = 1;
  Gender gender   = 2;
  string birthday = 3;

  uint32 features = 4;
}

message Person {
  string name                            = 1;
  Gender gender                          = 2;
  string birthday                        = 3;

  map<string, PlanetCycle> planet_cycles = 4;
  map<string, Card> base_cards           = 5;
  repeated Card personal_cards           = 6;
}

message Meaning {
  string keywords    = 1;
  string description = 2;
}

message Card {
  uint32 id       = 1;
  string rank     = 2;
  string suit     = 3;
  string title    = 4;
  string meta     = 5;  // descriptor for context

  // only one meaning according to a context (e.g. longterm, pluto and so on)
  Meaning meaning = 6;
}

message Planet {
  uint32 id     = 1;
  string name   = 2;
  string symbol = 3;
}

message PlanetCycleDate {
  uint32 month = 1;
  uint32 day   = 2;
}

message PlanetCycle {
	Card card             = 1;
	Planet planet         = 2;
	PlanetCycleDate start = 3;
	PlanetCycleDate end   = 4;
}

message PersonRequest {
  string api                 = 1;
  string lang                = 2;

  uint32 year                = 3;

  PersonProfile person_profile = 4;
}

message CardResponse {
  string api  = 1;
  string lang = 2;

  Card card   = 3;
}

message PersonResponse {
  string api    = 1;
  string lang   = 2;

  Person person = 3;
}

service PredictorService {
  rpc ComputePerson(PersonRequest) returns (PersonResponse) {
    option (google.api.http) = {
      post: "/v1/person/{year}"
      body: "*"
    };
  };

}
