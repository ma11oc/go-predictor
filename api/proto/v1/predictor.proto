syntax = "proto3";

package v1;

import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/ma11oc/go-predictor/api/proto/v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Predictor Service";
    version: "0.1";
    contact: {
      name: "predictor service project";
      url: "https://predictor.reset.sh";
      email: "predictor@reset.sh";
    };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};

enum Gender {
  OTHER  = 0;
  MALE   = 1;
  FEMALE = 2;
}

enum Features {
  NOT_SPECIFIED  = 0x00;
  BUSINESS_OWNER = 0x01;
  CREATOR        = 0x02;
}


message PersonProfile {
  string name     = 1;
  Gender gender   = 2;
  string birthday = 3 /* [(validate.rules) = {regex: "^[0-9]{4,4}-[0-9]{2,2}-[0-9]{2,2}$"}] */;
  int32  age      = 4;

  uint32 features = 5;
}

message Person {
  string name                            = 1;
  Gender gender                          = 2;
  string birthday                        = 3;
  uint32 age                             = 4;

  map<string, PlanetCycle> planet_cycles = 5;
  map<string, Card> base_cards           = 6;
  repeated Card personal_cards           = 7;
  repeated Card karma_cards              = 8;
}

message Meaning {
  string keywords    = 1;
  string description = 2;
}

message Card {
  string _meta    = 1;  // descriptor for context
  uint32 id       = 2;
  string rank     = 3;
  string suit     = 4;
  string title    = 5;

  // only one meaning according to a context (e.g. longterm, pluto and so on)
  Meaning meaning = 6;
}

message Planet {
  uint32 id     = 1;
  string name   = 2;
  string symbol = 3;
}

message PlanetCycleDate {
  uint32 month = 1;
  uint32 day   = 2;
}

message PlanetCycle {
  map<string, Card> cards = 1;
  Planet planet           = 2;
  PlanetCycleDate start   = 3;
  PlanetCycleDate end     = 4;
}

message CardResponse {
  string api  = 1;
  string lang = 2;

  Card card   = 3;
}

message PersonRequest {
  string api                   = 1 /* [(validate.rules) = {regex: "^v[0-9]+$"}] */;
  string lang                  = 2 /* [(validate.rules) = {regex: "^[a-z]{2,2}-[A-Z]{2,2}$"}] */;

  PersonProfile person_profile = 3 /* [(validate.rules) = {msg_exists : true}] */;
}

message PersonResponse {
  string api    = 1;
  string lang   = 2;

  Person person = 3;
}

service PredictorService {
  rpc ComputePerson(PersonRequest) returns (PersonResponse) {
    option (google.api.http) = {
      post: "/v1/person"
      body: "*"
    };
  };

}
